{"version":3,"sources":["index.js"],"names":["TextArea","Input","Search","mockData","getParentKey","key","tree","parentKey","i","length","node","children","some","item","getNodeByKey","fieldByKey","field","SearchTree","state","expandedKeys","searchValue","autoExpandParent","currentTextValue","consulData","Object","keys","map","path","value","onExpand","setState","consulObject","iterator","parseConsulElement","resultObject","parsedPath","split","filter","a","join","_","data","kv","parseConsulArray","this","gData","parseConsulObjectToTreeArray","currentPath","currentEntries","entries","currentKey","currentValue","textData","push","title","dataList","generateList","style","maxWidth","gutter","span","fontSize","color","marginTop","JSON","stringify","marginBottom","placeholder","onChange","e","target","indexOf","self","showIcon","switcherIcon","onSelect","selectedKey","displayPath","displayForm","getPath","nextPath","result","reverse","elementData","find","treeData","loop","index","beforeStr","substr","afterStr","className","rows","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46b9289e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as _ from \"lodash\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./index.css\";\r\nimport { Tree, Input, Row, Col, Button } from \"antd\";\r\n\r\nconst { TextArea } = Input;\r\nimport { DownOutlined, CarryOutOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Search } = Input;\r\n\r\n// mock kv JSON data\r\nconst mockData = {\r\n  \"/config/user/testuser/role\": \"readOnly\",\r\n  \"/config/user/admin/secondFactor\": \"enabled\"\r\n};\r\n\r\nconst getParentKey = (key, tree) => {\r\n  let parentKey;\r\n  for (let i = 0; i < tree.length; i++) {\r\n    const node = tree[i];\r\n    if (node.children) {\r\n      if (node.children.some(item => item.key === key)) {\r\n        parentKey = node.key;\r\n      } else if (getParentKey(key, node.children)) {\r\n        parentKey = getParentKey(key, node.children);\r\n      }\r\n    }\r\n  }\r\n  return parentKey;\r\n};\r\n\r\nconst getNodeByKey = (key, tree, field = \"title\") => {\r\n  let fieldByKey;\r\n  for (let i = 0; i < tree.length; i++) {\r\n    const node = tree[i];\r\n    if (node.key === key) {\r\n      return node[field];\r\n    } else {\r\n      if (node.children) {\r\n        fieldByKey = getNodeByKey(key, node.children);\r\n        if (fieldByKey) return fieldByKey\r\n      }\r\n    }\r\n  }\r\n  return fieldByKey;\r\n};\r\n\r\nclass SearchTree extends React.Component {\r\n  state = {\r\n    expandedKeys: [],\r\n    searchValue: \"\",\r\n    autoExpandParent: true,\r\n    currentTextValue: \"\",\r\n    // mock data\r\n    consulData: Object.keys(mockData).map(path => ({ path, value: mockData[path] }))\r\n  };\r\n\r\n  onExpand = expandedKeys => {\r\n    this.setState({\r\n      expandedKeys,\r\n      autoExpandParent: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // Object to fill from Consul data\r\n    const consulObject = {};\r\n    // Iterator to tree key assign\r\n    let iterator = 1;\r\n\r\n    const parseConsulArray = data => {\r\n      for (const kv of data) {\r\n        parseConsulElement(kv.path, kv.value, consulObject);\r\n      }\r\n    };\r\n\r\n    const parseConsulElement = (path, value, resultObject) => {\r\n      const parsedPath = path\r\n        .split(\"/\")\r\n        .filter(a => a)\r\n        .join(\".\"); // \"a.b.c.d\";\r\n      // lodash state\r\n      _.set(resultObject, parsedPath, value);\r\n    };\r\n\r\n    parseConsulArray(this.state.consulData);\r\n\r\n    const gData = [];\r\n    const parseConsulObjectToTreeArray = (currentPath, currentEntries) => {\r\n      for (const [currentKey, currentValue] of Object.entries(currentPath)) {\r\n        const children = [];\r\n        let textData;\r\n\r\n        if (typeof currentValue === \"object\") {\r\n          parseConsulObjectToTreeArray(currentValue, children);\r\n        } else {\r\n          textData = currentValue;\r\n        }\r\n\r\n        currentEntries.push({\r\n          key: \"\" + iterator++,\r\n          title: currentKey,\r\n          children,\r\n          textData\r\n        });\r\n      }\r\n    };\r\n\r\n    parseConsulObjectToTreeArray(consulObject, gData);\r\n\r\n    const dataList = [];\r\n    const generateList = data => {\r\n      for (let i = 0; i < data.length; i++) {\r\n        const node = data[i];\r\n        const { key, title, textData } = node;\r\n        dataList.push({ key, title, textData });\r\n        if (node.children) {\r\n          generateList(node.children);\r\n        }\r\n      }\r\n    };\r\n    generateList(gData);\r\n\r\n    const onChange = e => {\r\n      const { value } = e.target;\r\n      const expandedKeys = dataList\r\n        .map(item => {\r\n          if (item.title.indexOf(value) > -1) {\r\n            return getParentKey(item.key, gData);\r\n          }\r\n          return null;\r\n        })\r\n        .filter((item, i, self) => item && self.indexOf(item) === i);\r\n      this.setState({\r\n        expandedKeys,\r\n        searchValue: value,\r\n        autoExpandParent: true\r\n      });\r\n    };\r\n\r\n    const onSelect = ([selectedKey], { node }) => {\r\n      const getPath = (key, path = \"\") => {\r\n        const parentKey = getParentKey(key, gData);\r\n        if (parentKey) {\r\n          const nextPath = path + \"/\" + parentKey;\r\n          return getPath(parentKey, nextPath);\r\n        } else {\r\n          const result = path.split(\"/\").reverse().filter(a => a).map(key => getNodeByKey(key, gData));\r\n          return \"/\" + result.join(\"/\");\r\n        }\r\n      }\r\n\r\n      this.setState({ \r\n        displayPath: false,\r\n        displayForm: (node.children || []).length === 0,\r\n        currentPath: getPath(selectedKey, \"/\" + selectedKey)\r\n      });\r\n\r\n      const elementData = dataList.find(item => item.key === node.key);\r\n      if (elementData && elementData.textData) {\r\n        this.setState(state => ({\r\n          ...state,\r\n          currentTextValue: elementData.textData\r\n        }));\r\n      } else {\r\n        this.setState(state => ({\r\n          ...state,\r\n          currentTextValue: \"\"\r\n        }));\r\n      }\r\n    };\r\n\r\n    const {\r\n      searchValue,\r\n      expandedKeys,\r\n      autoExpandParent,\r\n      currentTextValue\r\n    } = this.state;\r\n    const loop = data =>\r\n      data.map(item => {\r\n        const index = item.title.indexOf(searchValue);\r\n        const beforeStr = item.title.substr(0, index);\r\n        const afterStr = item.title.substr(index + searchValue.length);\r\n        const title =\r\n          index > -1 ? (\r\n            <span>\r\n              {beforeStr}\r\n              <span className=\"site-tree-search-value\">{searchValue}</span>\r\n              {afterStr}\r\n            </span>\r\n          ) : (\r\n            <span>{item.title}</span>\r\n          );\r\n        if (item.children) {\r\n          return { title, key: item.key, children: loop(item.children) };\r\n        }\r\n\r\n        return {\r\n          title,\r\n          key: item.key\r\n        };\r\n      });\r\n    return (<div style={{maxWidth: 800}}>\r\n      <Row gutter={16}>\r\n        <Col span={12}>\r\n          Initial mock data:\r\n          <pre style={{fontSize: 12, color: \"gray\", marginTop: 6}}>\r\n          {\r\n            JSON.stringify(mockData, null, 2)\r\n          }\r\n          </pre>\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={16}>\r\n        <Col span={12}>\r\n          <Search\r\n            style={{ marginBottom: 8 }}\r\n            placeholder=\"Search\"\r\n            onChange={onChange}\r\n          />\r\n          <Tree\r\n            showIcon={true}\r\n            switcherIcon={<DownOutlined />}\r\n            onExpand={this.onExpand}\r\n            onSelect={onSelect}\r\n            expandedKeys={expandedKeys}\r\n            autoExpandParent={autoExpandParent}\r\n            treeData={loop(gData)}\r\n          />\r\n        </Col>\r\n        {this.state.displayForm ? (\r\n          <Col span={12}>\r\n            <TextArea\r\n              rows={15}\r\n              value={currentTextValue}\r\n              onChange={e =>\r\n                this.setState(state => ({ \r\n                  displayPath: false,\r\n                  currentTextValue: e.target.value\r\n                }))\r\n              }\r\n            />\r\n            <Button \r\n              style={{marginTop: 6}}\r\n              onClick={() => this.setState({ \r\n                displayPath: true\r\n              })}\r\n            >Save</Button>\r\n            <div style={{marginTop: 6}}>\r\n            {this.state.displayPath ? this.state.currentPath + \": \" + currentTextValue : null}\r\n            </div>\r\n            \r\n          </Col>\r\n        ) : null}\r\n      </Row></div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<SearchTree />, document.getElementById(\"container\"));\r\n"],"sourceRoot":""}